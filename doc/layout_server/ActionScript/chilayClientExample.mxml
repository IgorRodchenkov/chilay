<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
				layout="absolute"
				initialize="init()">
	
	<mx:Style source="chilayClientExample.css"/>
	
	<mx:Button icon="@Embed(source='assets/load.png')"
			   toolTip="Load XML"
			   click="loadXML()"
			   x="5" y="5" width="32" height="32"/>
	
	<mx:Button icon="@Embed(source='assets/layout-cose.png')"
			   id="coseLayoutButton"
			   toolTip="CoSE Layout"
			   click="requestLayout()"
			   x="47" y="5" width="32" height="32"/>
	
	<mx:Canvas id="drawingCanvas" width="3840" height="2160" x="5" y="47">
	</mx:Canvas>
	
	<mx:Script>
		<![CDATA[
			import ivis.*;
			
			import mx.core.Container;
			import mx.core.UIComponent;
			
			import ru.inspirit.net.MultipartURLLoader;
			
			private var graph: Graph = new Graph;
			private var loader: MultipartURLLoader = new MultipartURLLoader;
			private var fileReference: FileReference = new FileReference();
			private var coseUrl: String = "http://localhost:8080/chilay2x/layout.jsp"
			//private var coseUrl: String = "http://{SERVER_IP}/{RELATIVE_DEPLOYMENT_DIRECTORY}/layout.jsp"
			
				
			public function init(): void 
			{
				loader.addEventListener(Event.COMPLETE, onLayoutComplete);
			}
			
			// this function loads the graph model from given xml file
			// and draws the loaded graph model
			private function loadXML():void 
			{
				var fr: FileReference = new FileReference();
				fr.addEventListener(Event.COMPLETE, function(e:Event):void {
					clearDrawings();
					graph.fromXML(XML(fr.data))
					drawGraph();
				});
				fr.addEventListener(IOErrorEvent.IO_ERROR, function():void {
					trace("error laoding file");
				});
				fr.addEventListener(Event.SELECT, function(e:Event):void {
					trace("loading file");
					fr.load();
				});
				fr.browse([new FileFilter("GraphML (*.xml, *graphml)", "*.xml; *.graphml") ]);
			}

			// this function requests the remote layout with several options 
			private function requestLayout(): void 
			{
				var ba: ByteArray = new ByteArray;
				ba.writeUTFBytes(graph.toXML().toXMLString());
				loader.addFile(ba, "graph");
				
				// append options
				var genOpt:* = graph.generalOptions
				loader.addVariable("layoutQuality", genOpt.quality)
				loader.addVariable("animateOnLayout", genOpt.animateOnLayout)
				loader.addVariable("incremental", genOpt.incremental)
				
				var coseOpt:* = graph.CoSEOptions
				loader.addVariable("springStrength", coseOpt.springStrength)
				loader.addVariable("repulsionStrength", coseOpt.repulsionStrength)
				loader.addVariable("gravityStrength", coseOpt.gravityStrength)
				loader.addVariable("compoundGravityStrength", coseOpt.compoundGravityStrength)
				loader.addVariable("idealEdgeLength", coseOpt.idealEdgeLength)
				loader.addVariable("layoutStyle", "cose");
				
				loader.load(coseUrl);
			}
			
			// after remote layout request is responsed, 
			// this function draws the laid-out graph.
			private function onLayoutComplete(e: Event):void
			{
				var response: XML = XML(loader.getResponse())
				clearDrawings();
				graph.fromXML(response);
				drawGraph();
			}
			
			//----------------------------------------
			//             Drawing Methods
			//----------------------------------------

			private function clearDrawings(): void
			{
				drawingCanvas.graphics.clear();
			}
			
			private function drawGraph(): void
			{	
				for each (var node: Node in graph._nodes) 
				{
					this.drawNode(node);
				}
				
				for each (var edge: Edge in graph._edges)
				{
					this.drawEdge(edge);
				}
			}
			
			private function drawNode(node:Node): void
			{
				if(node.isCompound())
				{
					drawCompound((node as CompoundNode));
				}
				else
				{
					drawingCanvas.graphics.beginFill(Constants.NODE_COLOR, 
						Constants.NODE_TRANSPARENCY);
					drawingCanvas.graphics.lineStyle(Constants.NODE_BORDER_SIZE, 
						Constants.NODE_BORDER_COLOR);
					drawingCanvas.graphics.drawRoundRect(node.x, 
						node.y, 
						node.width, 
						node.height, 
						Constants.NODE_CORNER_RADIUS);
					drawingCanvas.graphics.endFill();		
				}
			}
			
			public function drawEdge(edge: Edge): void
			{
				var clippingPoints: Array = new Array();
				Utils.getIntersection(edge.source.toRectangle(), 
					edge.target.toRectangle(), 
					clippingPoints);
				
				drawingCanvas.graphics.beginFill(Constants.EDGE_COLOR, 
					Constants.EDGE_TRANSPARENCY);
				drawingCanvas.graphics.lineStyle(Constants.EDGE_SIZE, 
					Constants.EDGE_COLOR);
				drawingCanvas.graphics.moveTo(clippingPoints[0], 
					clippingPoints[1]);
				drawingCanvas.graphics.lineTo(clippingPoints[2], 
					clippingPoints[3]);
				drawingCanvas.graphics.endFill();		
			}
			
			public function drawCompound(compound: CompoundNode): void
			{
				drawingCanvas.graphics.beginFill(Constants.COMPOUND_COLOR, 
					Constants.COMPOUND_TRANSPARENCY);
				drawingCanvas.graphics.lineStyle(Constants.COMPOUND_BORDER_SIZE, 
					Constants.COMPOUND_BORDER_COLOR);
				drawingCanvas.graphics.drawRect(compound.x, 
					compound.y, 
					compound.width, 
					compound.height);
				drawingCanvas.graphics.endFill();		
				
				var childNode: Node;
				
				for each(childNode in compound.nodes)
				{
					drawNode(childNode);
				}
			}
		]]>
	</mx:Script>
</mx:Application>	